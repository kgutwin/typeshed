from _typeshed import Incomplete
from collections.abc import Callable, Generator, Sequence
from errno import *
from optparse import Values
from os import stat_result
from re import Pattern
from typing import IO, Any, AnyStr, overload
from typing_extensions import Literal

from fuseparts.subbedopts import SubbedOptFormatter as SubbedOptFormatter, SubbedOptIndentedFormatter, SubbedOptParse, SubOptsHive

FUSE_PYTHON_API_VERSION: tuple[Literal[0], Literal[2]]

def __getenv__(var, pattern: str = ..., trans: Callable[[str], str] = ...) -> str | None: ...
def get_fuse_python_api() -> tuple[int]: ...
def get_compat_0_1() -> bool: ...

fuse_python_api: str | tuple[int] | None
compat_0_1: str | None

class FuseArgs(SubOptsHive):
    fuse_modifiers: dict[str, str]
    modifiers: dict[str, bool]
    mountpoint: str | None
    def __init__(self) -> None: ...
    def getmod(self, mod: str) -> bool: ...
    def setmod(self, mod: str) -> None: ...
    def unsetmod(self, mod: str) -> None: ...
    def mount_expected(self) -> bool: ...
    def assemble(self) -> list[str]: ...
    def filter(self, other: Incomplete | None = ...): ...

class FuseFormatter(SubbedOptIndentedFormatter):
    def __init__(self, **kw: Any) -> None: ...
    help_position: int
    help_width: int
    def store_option_strings(self, parser) -> None: ...

class FuseOptParse(SubbedOptParse):
    mountopts: list[Incomplete]
    fuse_args: FuseArgs
    fetch_mp: bool
    fuse: Fuse
    def __init__(self, *args, **kw) -> None: ...
    def exit(self, status: int = ..., msg: str | None = ...) -> None: ...
    def error(self, msg: str) -> None: ...
    def print_help(self, file: IO[str] | None = ...) -> None: ...
    def print_version(self, file: IO[str] | None = ...) -> None: ...
    @overload
    def parse_args(self, args: None = None, values: Values | None = None) -> tuple[Values, list[str]]: ...
    @overload
    def parse_args(self, args: Sequence[AnyStr], values: Values | None = ...) -> tuple[Values, list[AnyStr]]: ...
    def add_option(self, *opts: str | None, **attrs: Any) -> Any: ...

class ErrnoWrapper:
    func: Callable[..., Any]
    def __init__(self, func: Callable[..., Any]) -> None: ...
    def __call__(self, *args, **kw) -> Any: ...

class FuseStruct:
    def __init__(self, **kw: Any) -> None: ...

class Stat(FuseStruct):
    st_mode: int | None
    st_ino: int
    st_dev: int
    st_nlink: int | None
    st_uid: int
    st_gid: int
    st_size: int
    st_atime: int
    st_mtime: int
    st_ctime: int
    def __init__(self, **kw: int) -> None: ...

class StatVfs(FuseStruct):
    f_bsize: int
    f_frsize: int
    f_blocks: int
    f_bfree: int
    f_bavail: int
    f_files: int
    f_ffree: int
    f_favail: int
    f_flag: int
    f_namemax: int
    def __init__(self, **kw: int) -> None: ...

class Direntry(FuseStruct):
    name: str
    offset: int
    type: int
    ino: int
    def __init__(self, name: str, **kw: int) -> None: ...

class Flock(FuseStruct):
    name: str | None
    l_type: int | None
    l_start: int | None
    l_len: int | None
    l_pid: int | None
    def __init__(self, name: str | None = ..., **kw) -> None: ...

class Timespec(FuseStruct):
    name: str | None
    tv_sec: int | None
    tv_nsec: int | None
    def __init__(self, name: str | None = ..., **kw) -> None: ...

class FuseFileInfo(FuseStruct):
    keep: bool
    direct_io: bool
    def __init__(self, **kw) -> None: ...

@overload
def feature_needs(*feas: None) -> dict[str, Any]: ...
@overload
def feature_needs(*feas: int | str | Sequence[int | str] | Pattern[AnyStr]) -> int: ...
def APIVersion() -> int: ...
def feature_assert(*feas: int | str | Sequence[int | str] | Pattern[AnyStr]) -> None: ...

class Fuse:
    fusage: str
    fuse_args: FuseArgs
    multithreaded: bool
    parser: FuseOptParse
    methproxy: Methproxy
    def __init__(self, *args, **kw) -> None: ...
    cmdline: tuple[Values, list[str]]
    def parse(self, *args, **kw) -> FuseArgs: ...
    def main(self, args: Incomplete | None = ...) -> None: ...
    def lowwrap(self, fname: str) -> Callable[..., Any]: ...
    def GetContext(self) -> dict[str, int]: ...
    def Invalidate(self, path: str) -> int: ...
    def NotifyPoll(self, pollhandle) -> int: ...
    fuseoptref: Incomplete

    class Methproxy:
        proxyclass: object
        mdic: dict[str, Callable[..., Any]]
        file_class: object
        dir_class: object
        def set_dir_class(self, xcls: object) -> None: ...
        def set_file_class(self, xcls: object) -> None: ...
        def __init__(self) -> None: ...
        def __call__(self, meth: str) -> Callable[..., Any]: ...

    def __getattr__(self, meth: str) -> Callable[..., Any]: ...
    flags: int
    optlist: Sequence[str]
    optdict: dict[str, str]
    mountpoint: str | None
    def __init_0_1__(self, *args, **kw) -> None: ...
    def main_0_1_preamble(self): ...
    def getattr_compat_0_1(self, *a: str) -> stat_result: ...
    def statfs_compat_0_1(self, *a: str) -> StatVfs: ...
    def readdir_compat_0_1(self, path: str, offset: int, *fh) -> Generator[Direntry, None, None]: ...
    compatmap: dict[str, str]

class FuseError(Exception): ...
