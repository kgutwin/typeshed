import abc
from collections.abc import Callable
from optparse import SUPPRESS_HELP as SUPPRESS_HELP, HelpFormatter, IndentedHelpFormatter, Option, OptionParser
from typing import Any

class SubOptsHive:
    optlist: set[str]
    optdict: dict[str, Any]
    def __init__(self) -> None: ...
    def canonify(self) -> None: ...
    def filter(self, other: SubOptsHive) -> SubOptsHive: ...
    def add(self, opt: str, val: Any = ...) -> None: ...

class SubbedOpt(Option):
    ATTRS: list[str]
    ACTIONS: tuple[str, ...]
    STORE_ACTIONS: tuple[str, ...]
    TYPED_ACTIONS: tuple[str, ...]
    subopt_map: dict[str, Any]
    subopt: str
    baseopt: str
    m: Any
    def __init__(self, *opts, **attrs) -> None: ...
    def get_opt_string(self) -> str: ...
    def take_action(self, action: str, dest: str, opt: Any, value: Any, values: Any, parser: OptionParser) -> int: ...
    def register_sub(self, o: SubbedOpt) -> None: ...
    CHECK_METHODS: list[Callable[..., Any]] | None

class SubbedOptFormatter(HelpFormatter, metaclass=abc.ABCMeta):
    def format_option_strings(self, option: Option) -> str: ...

class SubbedOptIndentedFormatter(IndentedHelpFormatter, SubbedOptFormatter):
    def format_option_strings(self, option: Option) -> str: ...

class SubbedOptParse(OptionParser):
    hive_class: SubOptsHive
    def __init__(self, *args, **kw) -> None: ...
    def add_option(self, *args: str | None, **kwargs: Any) -> Any: ...
